The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import function from module:


    >>> add_integer = __import__('0-add_integer').add_integer

Test ont int argument:


    >>> add_integer(1)
    99

Test one negative int:


    >>> add_integer(-1)
    97

Test ont float:


    >>> add_integer(12.2)
    110

Test one negative float:


    >>> add_integer(-12.2)
    86

Test two integers:


    >>> add_integer(2, 3)
    5

Test two huge integers:


    >>> add_integer(1000000, 1000000)
    2000000

Test one positive and one negative int:


    >>> add_integer(20, -5)
    15

Test one negative and one positive int:


    >>> add_integer(-5, 20)
    15

Test two floats:


    >>> add_integer(12.5, 12.5)
    24

Test a float and an int:


    >>> add_integer(2, 2.5)
    4

Test first arg invalide:


    >>> add_integer("invalide", 5)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test second arg invalide:


    >>> add_integer(5, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer


Test both args are invalide:


    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer


Add infinity:


    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

